// Generated by "bundle-dts@1.1.4" https://github.com/fishen/bundle-dts#readme."
/** Filter for a given hotkey group */
declare interface GroupFilter {
	/** Name of the group to be filtered */
	group: string | RegExp;
	/**
	* hotkeys to filter on. If the array is empty, it will allow all hotkeys
	* in the group
	*/
	hotkeys: (string | RegExp)[];
}
declare class Keys {
	get(key: string): {
		key: string;
		label: string;
	};
	get keys(): string[];
	get labels(): string[];
	get entries(): {
		key: string;
		label: string;
	}[];
	get KeyA(): string;
	get KeyB(): string;
	get KeyC(): string;
	get KeyD(): string;
	get KeyE(): string;
	get KeyF(): string;
	get KeyG(): string;
	get KeyH(): string;
	get KeyI(): string;
	get KeyJ(): string;
	get KeyK(): string;
	get KeyL(): string;
	get KeyM(): string;
	get KeyN(): string;
	get KeyO(): string;
	get KeyP(): string;
	get KeyQ(): string;
	get KeyR(): string;
	get KeyS(): string;
	get KeyT(): string;
	get KeyU(): string;
	get KeyV(): string;
	get KeyW(): string;
	get KeyX(): string;
	get KeyY(): string;
	get KeyZ(): string;
	get Digit1(): string;
	get Digit2(): string;
	get Digit3(): string;
	get Digit4(): string;
	get Digit5(): string;
	get Digit6(): string;
	get Digit7(): string;
	get Digit8(): string;
	get Digit9(): string;
	get Digit0(): string;
	get Numpad1(): string;
	get Numpad2(): string;
	get Numpad3(): string;
	get Numpad4(): string;
	get Numpad5(): string;
	get Numpad6(): string;
	get Numpad7(): string;
	get Numpad8(): string;
	get Numpad9(): string;
	get Numpad0(): string;
	get NumpadDecimal(): string;
	get NumpadDivide(): string;
	get NumpadMultiply(): string;
	get NumpadSubtract(): string;
	get NumpadAdd(): string;
	get NumpadEnter(): string;
	get Backspace(): string;
	get Enter(): string;
	get Insert(): string;
	get Delete(): string;
	get PageUp(): string;
	get PageDown(): string;
	get Home(): string;
	get End(): string;
	get BracketLeft(): string;
	get BracketRight(): string;
	get Slash(): string;
	get Backslash(): string;
	get Minus(): string;
	get Equal(): string;
	get Semicolon(): string;
	get Quote(): string;
	get Comma(): string;
	get Period(): string;
	get Backquote(): string;
}
/** Simple KeyMap for a Hotkey */
declare interface KeyMap {
	/** The key code to be listned for */
	key: string | String;
	/** Does the Alt key need to be pressed at the same time? */
	alt: boolean;
	/** Does the Ctrl key need to be pressed at the same time? */
	ctrl: boolean;
	/** Does the Shift key need to be pressed at the same time? */
	shift: boolean;
}
/** Hotkey Configuration Registration */
declare interface HotkeySetting {
	/** optional: Group to be included in with their own header. Default: General Group */
	group?: string | String;
	/** Unique variable name to be used in the layout. Recommend: 'module-name.myHotkey' */
	name: string | String;
	/** Label to be displayed in the layout. This will be localized when injected into the HTML */
	label: string | String;
	/**
	* Accept repeated KeyDown events, this occurs if the user is holding the key down, it will
	* send additional events that are spaced out according to the user's key press repeat settings.
	*/
	repeat?: boolean;
	/** The default setting for this hotkey, can be a static KeyMap, or a function that returns the default. */
	default: KeyMap | (() => KeyMap);
	/** Function for retrieving the current hotkey setting. If defined, you must also provide a `set` function. */
	get?(): KeyMap;
	/** Function for saving the new hotkey setting. If defined, you must also provide a `get` function */
	set?(value: KeyMap): Promise<KeyMap>;
	/** Function to handle the execution of the hotkey */
	/** @deprecated Use HotkeySetting.onKeyDown and HotkeySetting.onKeyUp */
	handle?(self: HotkeySetting): void;
	/**
	* Function to handle the execution of the Hot Key Down event.
	* @param self Convenience reference to this HotkeySetting object
	* @param event The original KeyboardEvent
	* @param repeated	Optional: This will only be defined if `repeat: true` has been set.
	* 					It will be false on the first Key Down event, but true on any subsequent
	* 					Key Down events caused by the user holding the key down.
	*/
	onKeyDown?(self: HotkeySetting, event: KeyboardEvent, repeated?: boolean): void;
	/**
	* Function to handle the execution of the Hot Key Up event.
	* @param self Convenience reference to this HotkeySetting object
	* @param event The original KeyboardEvent
	*/
	onKeyUp?(self: HotkeySetting, event: KeyboardEvent): void;
}
/** Hotkey Group Configuration */
declare interface HotkeyGroup {
	/** Unique name of the group. */
	name: string | String;
	/** Displayed in the HTML header for the group. */
	label: string | String;
	/** Optional description of the group */
	description?: string | String;
}
declare class _Hotkeys {
	static readonly keys: Keys;
	static get isShim(): boolean;
	/**
	* Displays the HotkeyConfig settings but filters the options available to the ones defined by filter.
	* @param title The title for the menu window.
	* @param filters The filters to apply to the HotkeyConfig dialog.
	*/
	static showConfig(title: string, filters: (string | RegExp | GroupFilter)[]): Promise<void>;
	/**
	* Returns a specialized constructor for the HotkeyConfig settings with filtering.
	* @param title The title for the menu window.
	* @param filters The filters to apply to the HotkeyConfig dialog.
	*/
	static createConfig(title: string, filters: (string | RegExp | GroupFilter)[]): any;
	/**
	* Registers a new hotkey configuration.
	* @param config Hotkey configuration.
	* @param throwOnFail	If true, will throw an error if a config with that name already exists, or
	*						an explicit group was given but does not exist; default true.
	* @throws Error if the hotkey already exists, or the config is malformed.
	* @returns The ID for the registration, used for De-Registration, or null if it failed to be registered.
	*/
	static registerShortcut(config: HotkeySetting, throwOnFail?: boolean): boolean;
	/**
	* De-registers the keyboard shortcut previously registered via the ID number returned by the `Hotkeys.registerShortcut` function.
	* @param id ID of the Hotkey to be de-registered.
	* @returns true if a handler was found and removed; false if no handler was found for the given key.
	*/
	static deregisterShortcut(name: string | String): boolean;
	/**
	* Registers a new Settings Group for hotkeys.
	* @param group Group settings, requiring the name and label. Description is optional.
	* @param throwOnFail If true, will throw an error if a group already exists for the given name; default true.
	* @throws Error if the group already exists, or the config is malformed.
	* @returns true if the group has been registered; otherwise false if the group already exists.
	*/
	static registerGroup(group: HotkeyGroup, throwOnFail?: boolean): boolean;
}
export let hotkeys: typeof _Hotkeys;
